name: Backend Unit Tests

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  push:
    branches:
      - main
      - release-*.*.*
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

permissions: {}

jobs:
  grafana:
    # Run this workflow only for PRs from forks
    # the `pr-backend-unit-tests-enterprise` workflow will run instead
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
    strategy:
      matrix:
        shard: [
          1/8, 2/8, 3/8, 4/8,
          5/8, 6/8, 7/8, 8/8,
        ]
      fail-fast: false

    name: Grafana (${{ matrix.shard }})
    runs-on: ubuntu-latest-8-cores
    continue-on-error: true
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Generate Go code
        run: make gen-go
      - name: Run unit tests
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          readarray -t PACKAGES <<< "$(./scripts/ci/backend-tests/shard.sh -N"$SHARD")"
          go test -short -timeout=30m "${PACKAGES[@]}"

  grafana-enterprise:
    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)
    # If it gets merged into `main` or `release-*`, then a junit test result is uploaded to GCS.
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
    strategy:
      matrix:
        shard: [
          1/8, 2/8, 3/8, 4/8,
          5/8, 6/8, 7/8, 8/8,
        ]
      fail-fast: false

    name: Grafana Enterprise (${{ matrix.shard }})
    runs-on: ubuntu-latest-8-cores
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Setup Enterprise
        uses: ./.github/actions/setup-enterprise
        with:
          github-app-name: 'grafana-ci-bot'
      - run: echo "RESULTS_FILE=$(date --rfc-3339=seconds --utc | sed -s 's/ /-/g')_${SHARD/\//_}.xml" >> "$GITHUB_ENV"
        env:
          SHARD: ${{ matrix.shard }}
      - run: go install github.com/jstemmer/go-junit-report/v2@85bf4716ac1f025f2925510a9f5e9f5bb347c009
      - name: Generate Go code
        run: make gen-go

      # Enterprise setup is needed for complete OpenAPI spec generation
      # We only do this for internal PRs
      - name: Setup Grafana Bench
        if: github.event.pull_request.head.repo.fork == false
        uses: ./.github/actions/setup-grafana-bench

      - name: Run unit tests with bench
        if: github.event.pull_request.head.repo.fork == false
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          readarray -t PACKAGES <<< "$(./scripts/ci/backend-tests/shard.sh -N"$SHARD")"
          SUITE_REPO_DIRS=""
          for PACKAGE in "${PACKAGES[@]}"; do
            SUITE_REPO_DIRS+="--suite-repo-dirs $PACKAGE "
          done
          grafana-bench test --grafana-version 12.0.0-test --test-runner go --go-retries 2 --go-test-args "-short -v -timeout=30m" $SUITE_REPO_DIRS
