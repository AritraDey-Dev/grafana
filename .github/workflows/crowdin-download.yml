name: Reusable Crowdin Download Workflow

on:
  workflow_call:
    inputs:
      crowdin_project_id:
        description: 'The Crowdin project ID'
        required: true
        type: number
      crowdin_config:
        description: 'The location of the crowdin.yml file'
        required: false
        type: string
        default: 'crowdin.yml'
      pr_labels:
        description: 'Comma separated list of labels to add to the PR'
        required: false
        type: string
      project_id:
        description: 'The project ID to add the PR to'
        required: false
        type: number
    outputs:
      pull_request_url:
        description: 'The URL of the created pull request (if it exists)'
        value: ${{ jobs.download-sources-from-crowdin.outputs.pull_request_url }}
      pull_request_number:
        description: 'The number of the created pull request (if it exists)'
        value: ${{ jobs.download-sources-from-crowdin.outputs.pull_request_number }}

jobs:
  download-sources-from-crowdin:
    name: Download sources from Crowdin
    runs-on: ubuntu-latest

    outputs:
      pull_request_url: ${{ steps.crowdin-download.outputs.pull_request_url }}
      pull_request_number: ${{ steps.crowdin-download.outputs.pull_request_number }}

    permissions:
      contents: write # needed to commit changes into the PR
      pull-requests: write # needed to update PR description, labels, etc
      id-token: write # needed to get vault secrets

    steps:
      - name: "Get vault secrets"
        id: vault-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]
        with:
          # Vault secret paths:
          # - ci/repo/grafana/grafana/grafana_frontend_platform_crowdin_bot
          repo_secrets: |
            CROWDIN_TOKEN=grafana_frontend_platform_crowdin_bot:access_token
            GRAFANA_PR_AUTOMATION_APP_ID=grafana_pr_automation_app:app_id
            GRAFANA_PR_AUTOMATION_APP_PEM=grafana_pr_automation_app:app_pem

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ env.GRAFANA_PR_AUTOMATION_APP_ID }}
          private_key: ${{ env.GRAFANA_PR_AUTOMATION_APP_PEM }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ steps.generate_token.outputs.token }}
          persist-credentials: false

      - name: Download sources
        id: crowdin-download
        uses: crowdin/github-action@b8012bd5491b8aa8578b73ab5b5f5e7c94aaa6e2
        with:
          upload_sources: false
          upload_translations: false
          download_sources: false
          download_translations: true
          export_only_approved: true
          localization_branch_name: i18n_crowdin_translations
          create_pull_request: true
          pull_request_title: 'I18n: Download translations from Crowdin'
          pull_request_body:  |
            :robot: Automatic download of translations from Crowdin.

            This runs once per day and will merge automatically if all the required checks pass.

            If there's a conflict, close the pull request and **delete the branch**.
            You can then either wait for the schedule to trigger a new PR, or rerun the action manually.
          pull_request_labels: ${{ inputs.pr_labels }}
          pull_request_base_branch_name: 'main'
          base_url: 'https://grafana.api.crowdin.com'
          config: ${{ inputs.crowdin_config }}
          # Magic details of the github-actions bot user, to pass CLA checks
          github_user_name: "github-actions[bot]"
          github_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CROWDIN_PROJECT_ID: ${{ inputs.crowdin_project_id }}
          CROWDIN_PERSONAL_TOKEN: ${{ env.CROWDIN_TOKEN }}

      - name: Get pull request ID
        if: steps.crowdin-download.outputs.pull_request_url && inputs.project_id
        shell: bash
        # Crowdin action returns us the URL of the pull request, but we need an ID for the GraphQL API
        # that looks like 'PR_kwDOAOaWjc5mP_GU'
        run: |
          pr_id=$(gh pr view ${{ steps.crowdin-download.outputs.pull_request_url }} --json id -q .id)
          echo "PULL_REQUEST_ID=$pr_id" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Get project board ID
        uses: octokit/graphql-action@51bf543c240dcd14761320e2efc625dc32ec0d32
        id: get-project-id
        if: steps.crowdin-download.outputs.pull_request_url && inputs.project_id
        with:
          # Frontend Platform project - https://github.com/orgs/grafana/projects/78
          org: grafana
          project_number: ${{ inputs.project_id }}
          query: |
            query getProjectId($org: String!, $project_number: Int!){
              organization(login: $org) {
                projectV2(number: $project_number) {
                  title
                  id
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Add to project board
        uses: octokit/graphql-action@51bf543c240dcd14761320e2efc625dc32ec0d32
        if: steps.crowdin-download.outputs.pull_request_url && inputs.project_id
        with:
          projectid: ${{ fromJson(steps.get-project-id.outputs.data).organization.projectV2.id }}
          prid: ${{ env.PULL_REQUEST_ID }}
          query: |
            mutation addPullRequestToProject($projectid: ID!, $prid: ID!){
              addProjectV2ItemById(input: {projectId: $projectid, contentId: $prid}) {
                item {
                  id
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
