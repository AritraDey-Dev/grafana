clone:
  retries: 3
depends_on: []
environment:
  EDITION: oss
image_pull_secrets:
- gcr
- gar
kind: pipeline
name: pr-integration-tests
node:
  type: no-parallel
platform:
  arch: amd64
  os: linux
services:
- environment:
    PGDATA: /var/lib/postgresql/data/pgdata
    POSTGRES_DB: grafanatest
    POSTGRES_PASSWORD: grafanatest
    POSTGRES_USER: grafanatest
  image: postgres:12.3-alpine
  name: postgres
  volumes:
  - name: postgres
    path: /var/lib/postgresql/data/pgdata
- commands:
  - docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password
  environment:
    MYSQL_DATABASE: grafana_tests
    MYSQL_PASSWORD: password
    MYSQL_ROOT_PASSWORD: rootpass
    MYSQL_USER: grafana
  image: mysql:8.0.32
  name: mysql80
  volumes:
  - name: mysql80
    path: /var/lib/mysql
- commands:
  - /bin/mimir -target=backend -alertmanager.grafana-alertmanager-compatibility-enabled
    -alertmanager.utf8-strict-mode-enabled
  environment: {}
  image: grafana/mimir-alpine:r316-55f47f8
  name: mimir_backend
- environment: {}
  image: redis:6.2.11-alpine
  name: redis
- environment: {}
  image: memcached:1.6.9-alpine
  name: memcached
steps:
- commands:
  - echo $(/usr/bin/github-app-external-token) > /github-app/token
  environment:
    GITHUB_APP_ID:
      from_secret: github-app-app-id
    GITHUB_APP_INSTALLATION_ID:
      from_secret: github-app-installation-id
    GITHUB_APP_PRIVATE_KEY:
      from_secret: github-app-private-key
  failure: ignore
  image: us-docker.pkg.dev/grafanalabs-global/docker-deployment-tools-prod/github-app-secret-writer:2024-11-05-v11688112090.1-83920c59
  name: github-app-generate-token
  volumes:
  - name: github-app
    path: /github-app
- commands:
  - apk add --update curl jq bash
  - GITHUB_TOKEN=$(cat /github-app/token)
  - is_fork=$(curl --retry 5 "https://$${GITHUB_TOKEN}@api.github.com/repos/grafana/grafana/pulls/$DRONE_PULL_REQUEST"
    | jq .head.repo.fork)
  - if [ "$is_fork" != false ]; then return 1; fi
  - git clone "https://x-access-token:$${GITHUB_TOKEN}@github.com/grafana/grafana-enterprise.git"
    ../grafana-enterprise
  - cd ../grafana-enterprise
  - if git checkout ${DRONE_SOURCE_BRANCH}; then echo "checked out ${DRONE_SOURCE_BRANCH}";
    elif git checkout ${DRONE_TARGET_BRANCH}; then echo "git checkout ${DRONE_TARGET_BRANCH}";
    else git checkout main; fi
  - cd ../
  - ln -s src grafana
  - cd ./grafana-enterprise
  - ./build.sh
  depends_on:
  - github-app-generate-token
  failure: ignore
  image: alpine/git:2.40.1
  name: clone-enterprise
  volumes:
  - name: github-app
    path: /github-app
- commands:
  - mkdir -p bin
  - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v3.1.2/grabpl
  - chmod +x bin/grabpl
  image: byrnedo/alpine-curl:0.1.8
  name: grabpl
- commands:
  - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
  depends_on: []
  environment:
    CGO_ENABLED: 0
  image: golang:1.24.2-alpine
  name: compile-build-cmd
- commands:
  - echo $DRONE_RUNNER_NAME
  image: alpine:3.21.3
  name: identify-runner
- commands:
  - '# It is required that code generated from Thema/CUE be committed and in sync
    with its inputs.'
  - '# The following command will fail if running code generators produces any diff
    in output.'
  - apk add --update make
  - CODEGEN_VERIFY=1 make gen-cue
  depends_on: []
  image: golang:1.24.2-alpine
  name: verify-gen-cue
- commands:
  - '# It is required that generated jsonnet is committed and in sync with its inputs.'
  - '# The following command will fail if running code generators produces any diff
    in output.'
  - apk add --update make
  - CODEGEN_VERIFY=1 make gen-jsonnet
  depends_on: []
  image: golang:1.24.2-alpine
  name: verify-gen-jsonnet
- commands:
  - apk add --update make
  - make gen-go
  depends_on:
  - verify-gen-cue
  image: golang:1.24.2-alpine
  name: wire-install
- commands:
  - dockerize -wait tcp://postgres:5432 -timeout 120s
  image: jwilder/dockerize:0.6.1
  name: wait-for-postgres
- commands:
  - apk add --update build-base
  - apk add --update postgresql-client
  - psql -p 5432 -h postgres -U grafanatest -d grafanatest -f devenv/docker/blocks/postgres_tests/setup.sql
  - go clean -testcache
  - go test -p=1 -count=1 -covermode=atomic -timeout=5m -run '^TestIntegration' $(find
    ./pkg -type f -name '*_test.go' -exec grep -l '^func TestIntegration' '{}' '+'
    | grep -o '\(.*\)/' | sort -u)
  depends_on:
  - wire-install
  - wait-for-postgres
  environment:
    GRAFANA_TEST_DB: postgres
    PGPASSWORD: grafanatest
    POSTGRES_HOST: postgres
  image: golang:1.24.2-alpine
  name: postgres-integration-tests
- commands:
  - dockerize -wait tcp://mysql80:3306 -timeout 120s
  image: jwilder/dockerize:0.6.1
  name: wait-for-mysql-8.0
- commands:
  - apk add --update build-base
  - apk add --update mariadb-client
  - cat devenv/docker/blocks/mysql_tests/setup.sql | mariadb -h mysql80 -P 3306 -u
    root -prootpass --disable-ssl-verify-server-cert
  - go clean -testcache
  - go test -p=1 -count=1 -covermode=atomic -timeout=5m -run '^TestIntegration' $(find
    ./pkg -type f -name '*_test.go' -exec grep -l '^func TestIntegration' '{}' '+'
    | grep -o '\(.*\)/' | sort -u)
  depends_on:
  - wire-install
  - wait-for-mysql-8.0
  environment:
    GRAFANA_TEST_DB: mysql
    MYSQL_HOST: mysql80
  image: golang:1.24.2-alpine
  name: mysql-8.0-integration-tests
- commands:
  - dockerize -wait tcp://redis:6379 -timeout 120s
  image: jwilder/dockerize:0.6.1
  name: wait-for-redis
- commands:
  - apk add --update build-base
  - go clean -testcache
  - go list -f '{{.Dir}}/...' -m  | xargs go test -run IntegrationRedis -covermode=atomic
    -timeout=2m
  depends_on:
  - wire-install
  - wait-for-redis
  environment:
    REDIS_URL: redis://redis:6379/0
  image: golang:1.24.2-alpine
  name: redis-integration-tests
- commands:
  - dockerize -wait tcp://memcached:11211 -timeout 120s
  image: jwilder/dockerize:0.6.1
  name: wait-for-memcached
- commands:
  - apk add --update build-base
  - go clean -testcache
  - go list -f '{{.Dir}}/...' -m  | xargs go test -run IntegrationMemcached -covermode=atomic
    -timeout=2m
  depends_on:
  - wire-install
  - wait-for-memcached
  environment:
    MEMCACHED_HOSTS: memcached:11211
  image: golang:1.24.2-alpine
  name: memcached-integration-tests
- commands:
  - dockerize -wait tcp://mimir_backend:8080 -timeout 120s
  image: jwilder/dockerize:0.6.1
  name: wait-for-remote-alertmanager
- commands:
  - apk add --update build-base
  - go clean -testcache
  - go test -run TestIntegrationRemoteAlertmanager -covermode=atomic -timeout=2m ./pkg/services/ngalert/...
  depends_on:
  - wire-install
  - wait-for-remote-alertmanager
  environment:
    AM_TENANT_ID: test
    AM_URL: http://mimir_backend:8080
  image: golang:1.24.2-alpine
  name: remote-alertmanager-integration-tests
trigger:
  event:
  - pull_request
  paths:
    exclude:
    - docs/**
    - '*.md'
    include:
    - pkg/**
    - packaging/**
    - .drone.yml
    - conf/**
    - go.sum
    - go.mod
    - public/app/plugins/**/plugin.json
type: docker
volumes:
- host:
    path: /var/run/docker.sock
  name: docker
- name: postgres
  temp:
    medium: memory
- name: mysql80
  temp:
    medium: memory
- name: github-app
  temp: {}
