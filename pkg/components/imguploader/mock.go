// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/components/imguploader (interfaces: ImageUploader)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=imguploader github.com/grafana/grafana/pkg/components/imguploader ImageUploader
//

// Package imguploader is a generated GoMock package.
package imguploader

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageUploader is a mock of ImageUploader interface.
type MockImageUploader struct {
	ctrl     *gomock.Controller
	recorder *MockImageUploaderMockRecorder
	isgomock struct{}
}

// MockImageUploaderMockRecorder is the mock recorder for MockImageUploader.
type MockImageUploaderMockRecorder struct {
	mock *MockImageUploader
}

// NewMockImageUploader creates a new mock instance.
func NewMockImageUploader(ctrl *gomock.Controller) *MockImageUploader {
	mock := &MockImageUploader{ctrl: ctrl}
	mock.recorder = &MockImageUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUploader) EXPECT() *MockImageUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockImageUploader) Upload(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockImageUploaderMockRecorder) Upload(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImageUploader)(nil).Upload), ctx, path)
}
