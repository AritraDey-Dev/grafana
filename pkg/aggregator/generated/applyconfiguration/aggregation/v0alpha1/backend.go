// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

import (
	aggregationv0alpha1 "github.com/grafana/grafana/pkg/aggregator/apis/aggregation/v0alpha1"
)

// BackendApplyConfiguration represents a declarative configuration of the Backend type for use
// with apply.
type BackendApplyConfiguration struct {
	Type       *aggregationv0alpha1.BackendType `json:"type,omitempty"`
	PluginID   *string                          `json:"pluginID,omitempty"`
	PluginType *aggregationv0alpha1.PluginType  `json:"pluginType,omitempty"`
	BaseURL    *string                          `json:"baseURL,omitempty"`
}

// BackendApplyConfiguration constructs a declarative configuration of the Backend type for use with
// apply.
func Backend() *BackendApplyConfiguration {
	return &BackendApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithType(value aggregationv0alpha1.BackendType) *BackendApplyConfiguration {
	b.Type = &value
	return b
}

// WithPluginID sets the PluginID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PluginID field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithPluginID(value string) *BackendApplyConfiguration {
	b.PluginID = &value
	return b
}

// WithPluginType sets the PluginType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PluginType field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithPluginType(value aggregationv0alpha1.PluginType) *BackendApplyConfiguration {
	b.PluginType = &value
	return b
}

// WithBaseURL sets the BaseURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseURL field is set to the value of the last call.
func (b *BackendApplyConfiguration) WithBaseURL(value string) *BackendApplyConfiguration {
	b.BaseURL = &value
	return b
}
