// Code generated by mockery v2.52.2. DO NOT EDIT.

package fakes

import (
	context "context"

	secrets "github.com/grafana/grafana/pkg/services/secrets"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: ctx, payload
func (_m *MockService) Decrypt(ctx context.Context, payload []byte) ([]byte, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []byte
func (_e *MockService_Expecter) Decrypt(ctx interface{}, payload interface{}) *MockService_Decrypt_Call {
	return &MockService_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, payload)}
}

func (_c *MockService_Decrypt_Call) Run(run func(ctx context.Context, payload []byte)) *MockService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockService_Decrypt_Call) Return(_a0 []byte, _a1 error) *MockService_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Decrypt_Call) RunAndReturn(run func(context.Context, []byte) ([]byte, error)) *MockService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptJsonData provides a mock function with given fields: ctx, sjd
func (_m *MockService) DecryptJsonData(ctx context.Context, sjd map[string][]byte) (map[string]string, error) {
	ret := _m.Called(ctx, sjd)

	if len(ret) == 0 {
		panic("no return value specified for DecryptJsonData")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) (map[string]string, error)); ok {
		return rf(ctx, sjd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) map[string]string); ok {
		r0 = rf(ctx, sjd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string][]byte) error); ok {
		r1 = rf(ctx, sjd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_DecryptJsonData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptJsonData'
type MockService_DecryptJsonData_Call struct {
	*mock.Call
}

// DecryptJsonData is a helper method to define mock.On call
//   - ctx context.Context
//   - sjd map[string][]byte
func (_e *MockService_Expecter) DecryptJsonData(ctx interface{}, sjd interface{}) *MockService_DecryptJsonData_Call {
	return &MockService_DecryptJsonData_Call{Call: _e.mock.On("DecryptJsonData", ctx, sjd)}
}

func (_c *MockService_DecryptJsonData_Call) Run(run func(ctx context.Context, sjd map[string][]byte)) *MockService_DecryptJsonData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]byte))
	})
	return _c
}

func (_c *MockService_DecryptJsonData_Call) Return(_a0 map[string]string, _a1 error) *MockService_DecryptJsonData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_DecryptJsonData_Call) RunAndReturn(run func(context.Context, map[string][]byte) (map[string]string, error)) *MockService_DecryptJsonData_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: ctx, payload, opt
func (_m *MockService) Encrypt(ctx context.Context, payload []byte, opt secrets.EncryptionOptions) ([]byte, error) {
	ret := _m.Called(ctx, payload, opt)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, secrets.EncryptionOptions) ([]byte, error)); ok {
		return rf(ctx, payload, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, secrets.EncryptionOptions) []byte); ok {
		r0 = rf(ctx, payload, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, secrets.EncryptionOptions) error); ok {
		r1 = rf(ctx, payload, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []byte
//   - opt secrets.EncryptionOptions
func (_e *MockService_Expecter) Encrypt(ctx interface{}, payload interface{}, opt interface{}) *MockService_Encrypt_Call {
	return &MockService_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, payload, opt)}
}

func (_c *MockService_Encrypt_Call) Run(run func(ctx context.Context, payload []byte, opt secrets.EncryptionOptions)) *MockService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(secrets.EncryptionOptions))
	})
	return _c
}

func (_c *MockService_Encrypt_Call) Return(_a0 []byte, _a1 error) *MockService_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Encrypt_Call) RunAndReturn(run func(context.Context, []byte, secrets.EncryptionOptions) ([]byte, error)) *MockService_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptJsonData provides a mock function with given fields: ctx, kv, opt
func (_m *MockService) EncryptJsonData(ctx context.Context, kv map[string]string, opt secrets.EncryptionOptions) (map[string][]byte, error) {
	ret := _m.Called(ctx, kv, opt)

	if len(ret) == 0 {
		panic("no return value specified for EncryptJsonData")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, secrets.EncryptionOptions) (map[string][]byte, error)); ok {
		return rf(ctx, kv, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, secrets.EncryptionOptions) map[string][]byte); ok {
		r0 = rf(ctx, kv, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, secrets.EncryptionOptions) error); ok {
		r1 = rf(ctx, kv, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_EncryptJsonData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptJsonData'
type MockService_EncryptJsonData_Call struct {
	*mock.Call
}

// EncryptJsonData is a helper method to define mock.On call
//   - ctx context.Context
//   - kv map[string]string
//   - opt secrets.EncryptionOptions
func (_e *MockService_Expecter) EncryptJsonData(ctx interface{}, kv interface{}, opt interface{}) *MockService_EncryptJsonData_Call {
	return &MockService_EncryptJsonData_Call{Call: _e.mock.On("EncryptJsonData", ctx, kv, opt)}
}

func (_c *MockService_EncryptJsonData_Call) Run(run func(ctx context.Context, kv map[string]string, opt secrets.EncryptionOptions)) *MockService_EncryptJsonData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].(secrets.EncryptionOptions))
	})
	return _c
}

func (_c *MockService_EncryptJsonData_Call) Return(_a0 map[string][]byte, _a1 error) *MockService_EncryptJsonData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_EncryptJsonData_Call) RunAndReturn(run func(context.Context, map[string]string, secrets.EncryptionOptions) (map[string][]byte, error)) *MockService_EncryptJsonData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecryptedValue provides a mock function with given fields: ctx, sjd, key, fallback
func (_m *MockService) GetDecryptedValue(ctx context.Context, sjd map[string][]byte, key string, fallback string) string {
	ret := _m.Called(ctx, sjd, key, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetDecryptedValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte, string, string) string); ok {
		r0 = rf(ctx, sjd, key, fallback)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_GetDecryptedValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecryptedValue'
type MockService_GetDecryptedValue_Call struct {
	*mock.Call
}

// GetDecryptedValue is a helper method to define mock.On call
//   - ctx context.Context
//   - sjd map[string][]byte
//   - key string
//   - fallback string
func (_e *MockService_Expecter) GetDecryptedValue(ctx interface{}, sjd interface{}, key interface{}, fallback interface{}) *MockService_GetDecryptedValue_Call {
	return &MockService_GetDecryptedValue_Call{Call: _e.mock.On("GetDecryptedValue", ctx, sjd, key, fallback)}
}

func (_c *MockService_GetDecryptedValue_Call) Run(run func(ctx context.Context, sjd map[string][]byte, key string, fallback string)) *MockService_GetDecryptedValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]byte), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetDecryptedValue_Call) Return(_a0 string) *MockService_GetDecryptedValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GetDecryptedValue_Call) RunAndReturn(run func(context.Context, map[string][]byte, string, string) string) *MockService_GetDecryptedValue_Call {
	_c.Call.Return(run)
	return _c
}

// ReEncryptDataKeys provides a mock function with given fields: ctx
func (_m *MockService) ReEncryptDataKeys(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReEncryptDataKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ReEncryptDataKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReEncryptDataKeys'
type MockService_ReEncryptDataKeys_Call struct {
	*mock.Call
}

// ReEncryptDataKeys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) ReEncryptDataKeys(ctx interface{}) *MockService_ReEncryptDataKeys_Call {
	return &MockService_ReEncryptDataKeys_Call{Call: _e.mock.On("ReEncryptDataKeys", ctx)}
}

func (_c *MockService_ReEncryptDataKeys_Call) Run(run func(ctx context.Context)) *MockService_ReEncryptDataKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_ReEncryptDataKeys_Call) Return(_a0 error) *MockService_ReEncryptDataKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ReEncryptDataKeys_Call) RunAndReturn(run func(context.Context) error) *MockService_ReEncryptDataKeys_Call {
	_c.Call.Return(run)
	return _c
}

// RotateDataKeys provides a mock function with given fields: ctx
func (_m *MockService) RotateDataKeys(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RotateDataKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RotateDataKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateDataKeys'
type MockService_RotateDataKeys_Call struct {
	*mock.Call
}

// RotateDataKeys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) RotateDataKeys(ctx interface{}) *MockService_RotateDataKeys_Call {
	return &MockService_RotateDataKeys_Call{Call: _e.mock.On("RotateDataKeys", ctx)}
}

func (_c *MockService_RotateDataKeys_Call) Run(run func(ctx context.Context)) *MockService_RotateDataKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_RotateDataKeys_Call) Return(_a0 error) *MockService_RotateDataKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RotateDataKeys_Call) RunAndReturn(run func(context.Context) error) *MockService_RotateDataKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
